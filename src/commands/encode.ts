import type { Arguments, CommandBuilder } from 'yargs';type Options = {  string: string;  format: string | undefined;};exports.command = 'encode <format> <string>';exports.describe = 'Encodes string in specified format';export const builder: CommandBuilder<Options, Options> = (yargs) =>  yargs    .positional('format', { type: 'string', demandOption: true })    .positional('string', { type: 'string', demandOption: true });export const handler = (argv: Arguments<Options>): void => {  const { format, string } = argv;  if (!format) {    throw new Error('No --format was provided');  }  try {    let result: string;    switch (format) {      case 'base64':        result = Buffer.from(string, 'utf-8').toString(format);        break;      case 'base64url':        result = Buffer.from(string, 'utf-8').toString(format);        break;      case 'ascii':        result = Buffer.from(string, 'utf-8').toString(format);        break;      case 'binary':        result = Buffer.from(string, 'utf-8').toString(format);        break;      case 'hex':        result = Buffer.from(string, 'utf-8').toString(format);        break;      case 'utf16le':        result = Buffer.from(string, 'utf-8').toString(format);        break;      default:        throw new Error('Unknown --format was provided');    }    process.stdout.write(result);    process.exit(0);  } catch (error) {    process.stdout.write(error.message);    process.exit(1);  }};